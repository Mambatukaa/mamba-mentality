package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	"fmt"

	"mamba-mentality.com/graph/model"
	"mamba-mentality.com/internal/config"
)

// AddUser is the resolver for the addUser field.
func (r *mutationResolver) AddUser(ctx context.Context, input *model.UserInput) (*model.User, error) {
	db := config.GetDBPool()
	fmt.Println("=======================================")

	sqlStatement := `
		INSERT INTO users (first_name, last_name)
		VALUES ($1, $2)
		RETURNING id`

	id := 0
	err := db.QueryRow(ctx, sqlStatement, input.FirstName, input.LastName).Scan(&id)

	if err != nil {
		panic(err)
	}

	fmt.Println("New record ID is:", id)

	firstName := "Batuka"
	lastName := "Nasan"

	return &model.User{
		FirstName: &firstName,
		LastName:  &lastName,
	}, err
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	db := config.GetDBPool()
	var (
		firstName string
		lastName  string
	)

	sqlStatement := `
		SELECT *
		FROM users
	`

	users, err := db.Query(ctx, sqlStatement)

	if err != nil {
		panic(err)
	}

	defer users.Close()

	for users.Next() {
		err := users.Scan(&firstName, &lastName)

		if err != nil {
			panic(err)
		}

		fmt.Println("\n", firstName, lastName)
	}

	return nil, err
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
